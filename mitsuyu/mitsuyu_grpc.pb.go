// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mitsuyu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MitsuyuClient is the client API for Mitsuyu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
// EDITED
/* ORIGIN
type MitsuyuClient interface {
	Proxy(ctx context.Context, opts ...grpc.CallOption) (Mitsuyu_ProxyClient, error)
}

type mitsuyuClient struct {
	cc grpc.ClientConnInterface
}
*/

type MitsuyuClient interface {
	Proxy(ctx context.Context, opts ...grpc.CallOption) (Mitsuyu_ProxyClient, error)
}

type mitsuyuClient struct {
	serviceName string
	cc grpc.ClientConnInterface
}

func NewMitsuyuClient(cc grpc.ClientConnInterface,serviceName string) MitsuyuClient {
	return &mitsuyuClient{cc:cc,serviceName:serviceName}
}

// EDITED
/* ORIGIN
func (c *mitsuyuClient) Proxy(ctx context.Context, opts ...grpc.CallOption) (Mitsuyu_ProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mitsuyu_ServiceDesc.Streams[0], "/Mitsuyu/proxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &mitsuyuProxyClient{stream}
	return x, nil
}
*/

func (c *mitsuyuClient) Proxy(ctx context.Context, opts ...grpc.CallOption) (Mitsuyu_ProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &genMitsuyu_ServiceDesc(c.serviceName).Streams[0], c.serviceName+"/proxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &mitsuyuProxyClient{stream}
	return x, nil
}

type Mitsuyu_ProxyClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type mitsuyuProxyClient struct {
	grpc.ClientStream
}

func (x *mitsuyuProxyClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mitsuyuProxyClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MitsuyuServer is the server API for Mitsuyu service.
// All implementations must embed UnimplementedMitsuyuServer
// for forward compatibility
type MitsuyuServer interface {
	Proxy(Mitsuyu_ProxyServer) error
	mustEmbedUnimplementedMitsuyuServer()
}

// UnimplementedMitsuyuServer must be embedded to have forward compatible implementations.
type UnimplementedMitsuyuServer struct {
}

func (UnimplementedMitsuyuServer) Proxy(Mitsuyu_ProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedMitsuyuServer) mustEmbedUnimplementedMitsuyuServer() {}

// UnsafeMitsuyuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MitsuyuServer will
// result in compilation errors.
type UnsafeMitsuyuServer interface {
	mustEmbedUnimplementedMitsuyuServer()
}

func RegisterMitsuyuServer(s grpc.ServiceRegistrar, srv MitsuyuServer,serviceName string) {
	s.RegisterService(genMitsuyu_ServiceDesc(serviceName), srv)
}

func _Mitsuyu_Proxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MitsuyuServer).Proxy(&mitsuyuProxyServer{stream})
}

type Mitsuyu_ProxyServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type mitsuyuProxyServer struct {
	grpc.ServerStream
}

func (x *mitsuyuProxyServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mitsuyuProxyServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Mitsuyu_ServiceDesc is the grpc.ServiceDesc for Mitsuyu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)

// EDITED
/* ORIGIN
var Mitsuyu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mitsuyu",
	HandlerType: (*MitsuyuServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "proxy",
			Handler:       _Mitsuyu_Proxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mitsuyu.proto",
}
*/

func genMitsuyu_ServiceDesc(serviceName string) *grpc.ServiceDesc{
	return &grpc.ServiceDesc{
		ServiceName: serviceName,
		HandlerType: (*MitsuyuServer)(nil),
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "proxy",
				Handler:       _Mitsuyu_Proxy_Handler,
				ServerStreams: true,
				ClientStreams: true,
			},
		},
		Metadata: "mitsuyu.proto",
	}
}
